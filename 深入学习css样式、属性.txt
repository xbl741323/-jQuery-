一、css属性
文本
盒模型
背景
浮动
定位
1、字体
color：字体颜色
色值：十六进制、RGB、rgba、颜色名。
color：#ff0000;红色
十六进制：逢十六进一，0-9，a-f
     ff=15*16+15*1=255
实际工作中，设计提供色值，用工具吸取。
颜色使用：背景色，边框色等。
color cop（颜色吸取工具）

font-family：字体
中文：微软雅黑、宋体
英文：Arial、Consolas
font-family:"Arial","Microsoft Yahei","SimSun"

font-size:字号
文字大小，自己设置一个通用字体大小，如果不设置，网页会有一个默认的字体大小。
谷歌浏览器：最小是12像素。如果文字设置小于12px，会自动显示成12px。
IE浏览器：最小没有限制，甚至是1px。
常用字号像素：12/14/16/18/20，都是一些偶数的像素值。
实际工作：字体大小听设计图的。
没有设计图，模仿网站的时候，只能测量。

line-height：行高
 一行文字实际占有的高度。
单位：像素或百分比（百分比是和font-size的倍数）
文字在自己的行高里垂直居中。
测量行高方法：写两行文字，上下对齐，查看行高属性。

font-weight：字体加粗
属性值：数字、单词
数字：100、200、...700.
单词：bold 加粗  normal 正常
font复合属性写法： font：bold 14px/40px "宋体"；

font-style：字体样式
设置字体倾斜样式或者正常样式。
取值：normal正常，italic斜体(会找一个有斜体的文字替换)，oblique斜体（正常的斜体，通常用这个）

复合属性书写：
font：bold oblique 40px/200% "微软雅黑"；

2、文本
text-align：对齐
对齐方式：水平左对齐，水平右对齐、水平居中。
对应的属性值：left、right、center。
与行数没有关系。
默认文本都是左对齐：left。
text-align：right;

text-indent：文本缩进
设置的是文本的首行缩进。
单位：em,px,百分比
text-indent：2em;（两个字体的大小）
text-indent：30px;（可以跟文字的大小做对比）
text-indent：10%;(是父类盒子宽度的10%，不是文本本身)

text-decoration：文本修饰
对于文本样式的一个修饰效果。
有四种常见样式：
正常，没有修饰：none;
下划线：underline;
中划线，删除线：line-through;
上划线：overline;


二、盒模型
1、概述：
盒模型，也叫做框模型
一个盒子的内容包含了五部分：宽度、高度、内边距、边框、外边距。

2、宽高
宽度：width
高度：height
这个宽度规定的是我们能够书写内容的区域，实际内容区域。
实际内容区域：width+height
盒子占有区域：
实际占有区域：width+height+padding+border
盒子有时候设置了宽高，如果增加内边距和边框，要想占有的位置不变，需要对宽高进行内减。
即
width:width-padding-border
height:height-padding-border

3、内边距
位置在宽高和边框之间。上下左右四个方向都可以设置内边距。
单位：px
padding本身是一个复合属性，可以设置上下左右的内边距。
单一属性写法：
padding-left：x px;
padding-right：x px;
padding-top：x px;
padding-bottom：x px;
复合属性写法：
padding：x px;
合并成复合属性：属性值方向：上、右、下、左
padding：30px 40px 50px 30px;

复合属性根据属性值的个数不同，分了四种写法;
四值法：四个方向属性值都不同。
padding：30px 40px 50px 30px;
三值法：上、左右、下，    （左右边距相同，上下边距不同）
padding：30px 40px 50px;
二值法：上下、左右              （上下边距相同，左右边距不同）
单值法：上下左右边距都相同
padding：30px;

常用：如果个别的方向边距不一样，其他方向一样。先用单值法设定总体，谁特殊，用单一属性单独设置。
padding：50px;
padding-left：30px;

padding区域可以渲染背景加颜色，但是不能书写内容。

4、边框border
盒子占有的最外层的区域。
本身是一个复合属性。
a.按样式类型来划分。
分成：线的宽度，线的样式，线的颜色。
宽度：border-width。
border-width：4px;(表示上下左右边框都是4px宽)

border-width：4px 8px;(表示上下为4px,左右为8px)

border-width：4px 8px 10px;(表示上为4px,左右为8px,下为10px)

border-width：4px 8px 10px 12px;(表示上为4px,右为8px,下为10px,左为12px)

颜色：border-color
border-color：red;
border-color: lightblue red yellow blue;（有四种样式同上）

线的样式：border-style
border-top-style(单一方向这样设置)
属性值分类：
       solid            实线
       dashed        虚线
       dotted         点的虚线
       double        双线条
       groove        边框凹陷效果
       ridge           边框突出效果
       inset            内容区域凹陷效果
       outset          内容区域凸陷效果
注意：css2.1版本里，border区域也有背景，border是渲染在背景上。
border-style: outset double dashed solid;（有四种样式同上）

b.按照方向分类
                border-top: 10px solid red;
	border-right: 10px dashed lightblue;
	border-bottom: 10px inset yellow;
	border-left: 10px double pink;
小案例：用css做一个三角形
利用border的边框三角来做
                border-top: 100px solid lightyellow;
	border-right: 100px dashed lightyellow;
	border-bottom: 100px inset yellow;
	border-left: 100px double lightyellow;

表格边框合并:
border-collapse：边框合并属性。
属性值：
默认值：separate，独立的。
合并：collapse。
                table,tr,td{
	border:  1px solid black;
	border-collapse: collapse;
		}

5.、外边距margin
外边距是盒子与盒子之间的距离。
它的设置方法与padding非常相似。
是一个复合属性，四个方向。
margin-left：x px;
margin-right：x px;
margin-top：x px;
margin-bottom：x px;

可以合写成一个复合属性：
margin: 30px 40px 50px 60px;
margin: 30px 40px 50px ;
margin: 30px 40px;
margin: 30px;
可以让盒子进行水平居中:
   属性值：auto
   盒子本身有宽度  

三、盒模型拓展
1、清空默认样式
很多标签都有一些默认的盒子样式。
比如：body、p、div、ul、li、ol、dl、dt、dd、h等都有默认的内外边距，需要清除。
ul、ol：都有一个list-style列表样式的默认样式，需要清除。
a：有默认的字体样式，有下划线，有字体颜色，这个是一个设置初始样式。
在制作网页之前，别的工作先不要做，首先要做的就是清除默认样式。
                                  *{
		    	margin: 0px;
		    	padding: 0px;
		    }
		    ul,ol{
		     list-style: none;
		    }
		    a{
		    	text-decoration: none;
		    	color: white;
		    }
这些是初始的清空默认样式，以后会加入新的默认样式清空。

2、height
一般情况下，不给盒子设置高度，而是用内部的内容撑高元素。
目的：为了保证我们的元素在添加或者删除内容的时候，高度可以自适应内容高度而变化。
实际工作中：样式和结构是由前端人员搭建的，实际我们的文字内容是由后台人员导入，内容不一定是规定好的数量，所以需要给后台人员留出可以控制的范围。

上面只是一种情况：不一定都不设置高度。
设置内容溢出的隐藏的属性：
overflow: hidden;

高度自适应还可以书写成：
height：auto；

3、宽度剩余
制作网页的小技巧，一般右边边距根据内容不同没办法去确定这个padding-right。我们只需要设置左边距，右侧都给width。内容自动去填充，剩余的部分自动留白就行。
padding：12px 22px;
padding-right：0px;
类似的有：高度剩余。（先了解一下，以后再具体讲。）

4、margin塌陷
垂直方向（注意是垂直方向上）上相邻的两个元素如果都有外边距，而且外边距有相交的部分，相交的部分会出现外边距重合现象，也叫做外边距塌陷。
                             div{
			width: 200px;
			height: 200px;
			background-color: lightblue;

		}
		.box1{
			margin: 50px 0px;
		}
		.box2{
			margin: 100px 0px;
		}
嵌套的盒子，也会出现margin塌陷的情况。
                        .box1{
			width: 200px;
			height: 200px;
			background-color: lightblue;
			margin: 100px 0px;

		}
		.box2{
			width: 100px;
			height: 100px;
			background-color: pink;
			margin: 50px 0px;
		}
实际工作中：两个同级盒子之间，要么给上面的盒子设置下边距，要么给下面的的盒子设置上边距，不要同时设置。
当然也可以强制设置子盒子和父盒子之间的垂直距离：
a.强行给父盒子加一个边框，强制限定父盒子的位置。
b.不要用儿子的margin去踹父亲，距离用父黑盒子的padding撑开。

5、居中
文字居中:
水平方向居中：text-align.
text-align：center；
垂直方向：
单行文本居中：行高等于盒子高；line-height=height;
多行文本居中：不设置盒子height，设置padding即可；

盒子居中：子盒子在父盒子内部剧中显示。
水平居中：给自身添加宽度，用margin给两边挤出相同的空白。
margin的属性值auto，自动撑开一个最大的边距。
垂直居中：父盒子高度不设置，给父盒子添加上下相同的padding，高度会自适应子盒子的高度。
                           box1{

			width: 100px;
			/*height: 200px;*/
			padding: 50px;
			background-color: lightblue;
			margin:50px auto;

		}
		.box2{
			width: 100px;
			height: 100px;
			background-color: pink;
			margin: 0px auto;
		}
或者
.box1{
			width: 200px;
			/*height: 200px;*/
			padding: 50px 0px;
			background-color: lightblue;
			margin:50px auto;

		}
		.box2{
			width: 100px;
			height: 100px;
			background-color: pink;
			margin: 0px auto;
		}
6、父子盒模型
子盒子的整体占位不能超过父盒子的内容区域。
父盒子的内容区域>=子盒子width+padding*2+border*2
如果子盒子不设置宽度，会自动撑满父盒子，宽度是父盒子的100%。如果你再设置了边框和内边距，自动向内减少，不需要你手动去减少width。

四、标准文档流
       常用的word文档就是一个经典的标准文档流。我们的内容必须是从上往下，从左往右书写的，有一个光标控制。前面的内容大小或者内容发生变化，后面的内容会跟着发生一些位置变化。
        制作的html网页：就是一个标准的文档流。
1、从微观上有特殊的性质
a、html文本之间有空白折叠现象。
b、文字、图片、表单元素等这些文本类型的元素有一个特点：高矮不齐，底边对齐。
c、文字在盒子内如果书写完毕，会自动换行。

2、块级元素和行内元素
标准文档流将会我们html标签分成了：块级标签、行内标签。
块级标签：所有的容器级标签都是块级标签。文本标签里的p标签也是一个块级标签。
行内标签：除了p标签以外都是文本级标签。
块级标签：body,div,h1,p,ul,ol,dl,li,dt,dd,table,tr,td等。
行内标签：a,span,img,input等文本类的。

块级标签：
a、块级标签会独占一行，同行不会出现其他的同级标签。
b、可以设置宽高。
c、嵌套的关系里，子盒子不设置宽度，会自动继承父盒子内容宽度的100%。

行内标签：
a、行内标签不独占一行，和其他行内标签并排一行。
b、不能设置宽高。其他的内边距、边框、外边距能够正常设置。
c、行内元素不设置宽度，不会自动继承父亲的宽度，只能用内容撑开。

行内块标签：
既可以设置宽高，还可以在一行排列。
有一个属性可以在块级元素和行内元素之间进行转换。
显示模式：display.标签在html网页里面何种模式进行渲染。
属性值：块级block，行内inline,行内块inline-block。

块级标签转行内标签：（不常用）
display：inline；
行内标签转块级标签：（常用）
display：block；
转行内快：
display：inline-block；

标准文档流制作网页有局限：很多布局效果不能完成。
解决方法：让元素脱离标准流，即可以设置宽高，又可以一行排列。
脱离标准流方法：浮动、绝对定位、固定定位。

五、浮动
浮动：属性值float，漂流的意思。
作用：让我们的元素以某一个方向在一行并排排列。
浮动的特殊效果：元素脱离标准流，既可以设置宽高，又可以一行排列。
属性值：left、right。
左浮动：会从第一个元素开始依此去贴父元素的左边。
float：left；
右浮动：会从第一个元素开始依此去贴父元素的右边。
float：right；
同一个盒子里，子元素可以有不同方向的浮动。

浮动的性质：
1、浮动的元素脱标
常见的标签都是标准流的，区分行块，如果给元素设定浮动属性，元素会脱离标准流，元素既可以设置宽高，又可以排在一行 。
2、浮动的元素依此贴边
浮动分方向：左浮动、右浮动。
多个浮动的的元素在一个父盒子内，会根据书写标签的顺序依此向前贴边。
以左浮动为例：父盒子的左边框内部<-盒子1<-盒子2<-盒子3<-盒子4........
如果父盒子范围不够装下所有的盒子，后面的盒子会自动换行去贴上一个元素的边，依此去找上一个盒子，如果上一个盒子后面的距离还不够，再往上找~
子盒子如果高矮不同，中间出现了缝隙，后面的盒子不会钻空。

案例：制作一个仿表格的效果。（用无序列表的浮动来做）
如果两个方向都有浮动的效果：元素会找他同一个方向上的上一个元素去贴边。
3、没有margin塌陷现象
浮动的元素脱离标准流，不会出现垂直方向上的margin塌陷现象。
4、浮动元素让出标准流位置
元素在标准文档流里面有自己的书写位置，一个元素写完之后才能加载另外一个元素。
元素浮动之后，不再是标准文档流，位置会让给后面的标准文档流里面的标签元素。
让出的效果：看起来像是压盖效果。实际上我们不需要用浮动制作压盖，用后面的决定定位制作压盖。
同一个父盒子里，有的元素浮动，有的不浮动，这种会影响标准流显示效果，我们要求，一个父盒子里的元素，要浮动都浮动。
5、浮动有字围（文字围绕）的效果
文字不像盒子背景一样，不会被浮动的元素给遮盖住，文字会绕开浮动元素进行排列。

六、清除浮动
1、浮动存在的问题
浮动的元素不能撑高父盒子
元素脱离标准流之后，不能再撑高它的父级盒子。
浮动会影响后面的的浮动的元素。
如果后面元素的浮动方向相同，会去贴上一个浮动最后一个元素的边。
2、解决方法
a、直接给父盒子加高度
给父级元素增加高度，它内部的浮动的元素，被限制了范围，不会再影响后面的的元素浮动。
效果：解决父级高度的问题，解决浮动影响后面的浮动元素的问题。
但还是有问题：高度不能够自适应。
3、清除浮动属性clear
元素都可以设置一个叫做clear的属性，清除浮动的作用。
属性值：left、right、both
作用：clear整体表示清除自身受到的其他元素带来的浮动的影响。
left：清除受到的左浮动影响
right：清除受到的右浮动影响
both：清除受到的左右两个方向的浮动影响
解决：浮动的相互影响。
问题：父盒子还是不能被子盒子撑高。margin如果小于中间浮动的子元素的高度，显示效果失效。
4、隔墙法
隔墙法：在互相影响的元素中间加一道墙，阻隔开两边的元素，墙上添加一个clear属性。
外墙法：
在有浮动元素的父盒子之间隔一道墙。
                                 .cl{
		    	clear: both;         清除浮动
		    }
		    .c20{
		    	height: 50px;       模拟间距
		    }
解决：浮动互相影响。
问题：高度自适应，margin失效。
内墙法：（亲测效果明显）
将清除浮动的墙放在有浮动元素的父盒子的内部的最后。只要有浮动，就在盒子内部加一堵墙。
解决：浮动互相影响，高度自适应，margin失效。
缺点：1、html结构布局，很多需要进行布局，每个浮动的盒子都要隔一堆墙。会造成无意的标签冗余。
          2、一个盒子的标签要浮动都浮动，浮动后面的墙是一个标准流里的元素。
5、overflow：hidden
盒子内部的元素可以设置成溢出模式，隐藏，自动显示。
属性值：hidden溢出隐藏，auto溢出滚动。
                        overflow: hidden;
                        overflow: auto;
overflow的其他小功能：能够清除盒子内部元素的浮动
解决：浮动互相影响，高度自适应，margin失效。
优势：能够解决所有的问题，不会增加无用的标签。
overflow：hidden；的加载机制。（了解即可，不必深究）
     高度自适应：如果元素有溢出的属性，网页加载时，会强制的去元素内部搜索，识别所有的内部元素的高度，会用最高的元素高度配给我们父盒子的自适应高度。
     浮动影响：加载时，如果出现溢出隐藏，强制检索，看盒子内部是否有浮动的元素，如果有，会被整体管理起来，在自身的高度内，不会影响其他的浮动元素。
实际工作中：就用overflow来清除浮动。
如果遇到大的结构，会在结构之间加一堵外墙。

小技巧：制作矩形变色的边框。方法：用两个盒子来制作，蓝色区域给父盒子设置，灰色区域给子盒子设置。
制作tab栏：也叫选项卡（最终效果在js里会讲到）
没有被选中的主体部分，需要隐藏，选中的显示。
给所有的元素加一个显示模式隐藏，给需要显示的元素加一个显示模块级。
display：none;隐藏我们的元素
display：block；显示我们的元素