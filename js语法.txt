一、js基本语法
1.字面量，都是一些不可变的值
 比如：1 2 3 4

2.变量，变量可以用来保存字面量，而且变量的值可以改变。
开发中，都是通过变量保存字面量，很少直接使用字面量。

3.声明变量
在js中使用var关键词来声明一个变量
var a = 123;
console。log(a);
然后再为其赋值；（同java）

4.标识符
命名规则：(同java)
由数字、字母、下划线、$组成
区分大小写，不能是js关键字或保留字，不能以 数字开头
采用驼峰命名法

5.在js中一共有六种数据类型
String 字符串
Number 数值
Boolean 布尔值
Null 空值
Undefined 未定义
Object 对象(引用数据类型)

6.字符串
var str = "你好";
js中字符串需要使用引号引起来
使用双引号或单引号都可以，但时不能混着用
引号不能嵌套，双引号里不能放双引号，单引号里面不能放单引号

7.转义字符
\"
\'
\n
\t
\\

8.Number
在js中所有的数值都是number类型
包括整数和浮点数
console.log(typeof str);可以查看str的数据类型
console.log(Number.MAX_VALUE);输出js中的最大值
console.log(Number.MIN_VALUE);输出js中的最小值（大于0的最小值）
console.log(Number.MAX_VALUE * Number.MAX_VALUE)；输出结果显示“Infinity”(无穷大的)
 如果Number表示的值超过最大值会返回这个“Infinity”
Infinity是Number类型表示正无穷
-Infinity表示负无穷
如果使用js进行浮点数运算，可能得到一个不精确的结果
所以不要使用js进行精确度比较高的运算

9.布尔类型Boolean
布尔值只有两个值true 和 false用来做逻辑判断
var bool = true;
console.log(bool);
console.log(typeof bool);

10.null和undefined
Null类型的值专门用来表示一个空的对象
使用ytpeof检查其类型时，结果返回object
Undefined(未定义)类型的值只有一个，就Undefined
当声明一个变量，但是不给它赋值时，它的值就是Undefined
使用typeof检查一个Undefind时也会返回一个undefined
NaN也是Number类型

11.强制类型转换（意思同java）
主要指将其他的数据类型转换为
String、Number、Boolean
a、转换为String
方法：
1.用toString()方法
var a = 123;
var b = a.toString();(a.toString()有返回值)
var a = a.toString();
有局限性
var a = null;
a = a.toString();//会报错
var b = undefined;
b = b.toString();//会报错
null和undefined没有toString()方法
2.调用String（）函数，并将被转换的数据作为参数传递给函数
var a =null;
a = String(a);//转换成功
var b = undefined;
b = String(b);//转换成功
对于null和undefined有效

b、转换成Number类型
方法1：调用Number（）函数将字符串类型转换成Number类型
var a ="123";
a = Number(a);
String->Number
1、如果是纯数字类型的字符串，则直接将其转换成数字
2、如果字符串里面由非数字的内容。则转换成NaN
3、如果字符串是一个空串或者字符为空，转换结果为0
boolean->Number
true->1
false->0
Null->Number==0
Undefined->Number==NaN
不过此方法有局限性：比如无法将="123px";转换成123

方法2：
这种方式专门用来对付字符串
parseInt() 把字符串中有效的整数部分取出来转换成整数结果(也可以将浮点型转换成整数)
parseFloat() 把字符串中的有效小数部分取出来转换成浮点数
注意：如果对非String使用parseInt()或者parseFloat()它会先将其转换成String，然后再操作
例如：
var a = true;
a = parseInt(a);//结果为NaN

c、转换成Boolean类型
调用Boolean()来转化
数字转Boolean（除了0和NaN，其他的都是true）
字符串转换成Boolean(除了空串其余的都是true)
Null->false
Undefined->false
对象也会转化成true

12、其他进制Number
//十六进制
var a = ox12;
//八进制
var a = 010;
//2进制
var a = ob11;
a = parseInt(a,10)//可以将其转换成10进制

13、运算符
运算符也叫做操作符（同java）
运算符可以将一个或多个值进行运算，并获取运算结果
比如typeof就是运算符，结果转换成字符串类型输出

算术运算符
+、-、*、/、%、
对非Number类型的值进行运算时，会将这些值转换成Number再计算true->1 false->0
任何值与NaN做运算结果都是NaN
字符串里面的+就是字符串连接符
任何值与字符串做+运算都会转换成字符串
c = c +"";也可以用来转换成字符串
result = 100 -"1";//结果为99
任何值与-、*、/运算时会自动转换成为Number

一元运算符：只需要一个操作数
+ 正号//可以其他类型加+变成Number类型
-  负号

自增、自减运算符(用法同java)
++\--

逻辑运算符(用法同java)
！、&&、||
对于&&
如果第一个值为true，则必然返回第二个值
如果第一个值为false，则直接返回第一个值
对于||
如果第一个值为true，则直接返回